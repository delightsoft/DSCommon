package docflow.queries;

import code.docflow.queries.Query;
import code.docflow.rights.DocumentAccessActionsRights;
import code.utils.BitArray;
import models.${document.name};
import play.mvc.Http;

import java.util.TreeMap;

public class Query${document.name} extends Query {
%{ if (!document.report) { }%
    public static void calculate(${document.name} ${code.utils.NamesUtil.turnFirstLetterInLowerCase(document.name)}, BitArray mask, DocumentAccessActionsRights rights) {
        ${code.utils.NamesUtil.turnFirstLetterInLowerCase(document.name)}.text = ${code.utils.NamesUtil.turnFirstLetterInLowerCase(document.name)}.${defaultCalculatedText};
    }

    public static Result<${document.name}> list(Http.Request request, DocumentAccessActionsRights fullRights) {
        final Paging paging = pagingParams(request);
        final ${document.name}.Filters filter = enumParam("f", ${document.name}._filters, request);
        final ${document.name}.SortOrders sortOrder = enumParam("o", ${document.name}._sortOrders, request);
        final boolean sortOrderDesc = boolParam("desc", request);
        final String searchText = request.params.get("x");

        String select = "doc";
        String from = ${document.name}.TABLE + " doc";
        String where = filter.where;
        TreeMap<String, Object> params = new TreeMap<String, Object>();

        final Result<${document.name}> res = listEntities(select, from, where, params, searchText, setDirection(sortOrder.orderBy, sortOrderDesc), ${document.name}.class, ${document.name}.TABLE + " doc", paging);
        res.query.params.put("f", filter.toString());
        res.query.params.put("o", sortOrder.toString());
        res.query.params.put("desc", toString(sortOrderDesc));
        res.query.params.put("x", searchText);

        return res;
    }%{ } }%
}
