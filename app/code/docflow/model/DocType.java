package code.docflow.model;

import code.docflow.collections.Item;
import code.docflow.yaml.annotations.NotYamlField;
import code.jsonBinding.JsonTypeBinder;
import code.utils.BitArray;
import play.vfs.VirtualFile;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.TreeMap;

/**
 * Root element, marked within yaml by local tag '!document'.
 */
public final class DocType extends RootElement {

    public static final DocType NOT_A_DOCUMENT = new DocType();

    public static final String MODELS_PACKAGE = "models.";

    public LinkedHashMap<String, Field> fields;

    public LinkedHashMap<String, FieldsGroup> fieldsGroups;

    public LinkedHashMap<String, Template> templates;

    public LinkedHashMap<String, Action> actions;

    public LinkedHashMap<String, DocumentRelation> relations;


    /**
     * List of named filters, to be use in building a list of documents.
     */
    public LinkedHashMap<String, DocumentFilter> filters;

    /**
     * List of names ordering rules, to be use in building a list of documents.
     */
    public LinkedHashMap<String, DocumentSortOrder> sortOrders;

    public LinkedHashMap<String, State> states;

    /**
     * True, if this is user defined types definitions document, built from fieldTypes.yaml.
     */
    @NotYamlField
    public boolean udt;

    /**
     * True, if ID only document.  Such documents expected to used for dictionary tables and to too keep
     * system information, like user's sessions record that cannot be edited by any user.
     */
    public boolean simple;

    /**
     * True, if document participates in linked document relations as a linked document.
     * Linked document constraints are:<ul>
     * <li>It has 'subj' field that is a reference to an owner document.</li>
     * <li>Linked document can be instantiated only by assigning new document to corresponded owner documenty field.</li>
     * <li>Likely, user cannot replace already assigned linked document.  Reference can only be cleared as a consequence
     * of linked document state changed (I.e. 'delivery' will be cleared if delivery either was completed or rejected).</li>
     * </ul>
     */
    public boolean linkedDocument;


    /**
     * True, if document considered as dictionary.
     */
    public boolean dictionary;

    /**
     * True, if this document is suppose to present dynamic information generated by code.  So, this document
     * is not persisted in DB, and, as a consequence, do not have regular 'id' field.
     */
    public boolean report;

    /**
     * Play path, where document descriptions was found.  Used to distinguish production and test documents.
     */
    @NotYamlField
    public VirtualFile sourcePath;

    @NotYamlField
    public int index;

    @NotYamlField
    public State[] statesArray;

    @NotYamlField
    public TreeMap<String, Field> fieldByFullname = new TreeMap<String, Field>();

    /**
     * All fields, including fields from substructures.
     */
    @NotYamlField
    public ArrayList<Field> allFields = new ArrayList<Field>();

    @NotYamlField
    public Action[] actionsArray;

    /**
     * List of implicit fields within document.
     */
    @NotYamlField
    public ArrayList<Field> implicitFields = new ArrayList<Field>();

    /**
     * List of entities (database tables, Hibernate entities) build for this document.
     */
    @NotYamlField
    public ArrayList<Entity> entities = new ArrayList<Entity>();

    /**
     * Derived (including Calculated) fields mask.
     */
    @NotYamlField
    public BitArray derivedFieldsMask;

    /**
     * Calculated fields mask.
     */
    @NotYamlField
    public BitArray calculatedFieldsMask;

    /**
     * Unconditional actions permissions for the document.
     */
    @NotYamlField
    public BitArray serviceActionsMask;

    /**
     * Combined view permissions for the document.  It's a combination of view unconditional permissions and
     * view permissions for every state.
     */
    @NotYamlField
    public BitArray fullViewMask;

    /**
     * Combined update permissions for the document.  It's a combination of update unconditional permissions and
     * update permissions for every state.
     */
    @NotYamlField
    public BitArray fullUpdateMask;

    /**
     * Only field that belongs directly to document.
     */
    @NotYamlField
    public BitArray levelMask;

    /**
     * Combined actions permissions for the document.  It's a combination of actions unconditional permissions and
     * actions permissions for every state.
     */
    @NotYamlField
    public BitArray fullActionsMask;

    /**
     * All fields from built-in 'implicit' fields group, that includes implicit fields of the document and
     * fields required to support inner structure fields.
     */
    @NotYamlField
    public BitArray implicitFieldsMask;

    /**
     * All fields from built-in 'implicitTopLevel' fields group, that includes implicit fields of the document and
     * fields required to support inner structure fields.
     */
    @NotYamlField
    public BitArray implicitTopLevelFieldsMask;

    /**
     * All fields of the document, but implicitFieldsMask masked fields.
     */
    @NotYamlField
    public BitArray notDerivedFieldsMask;

    /**
     * JsonTypeBinder for this document.  To create new object use jsonBinder.recordAccessor.
     */
    @NotYamlField
    public JsonTypeBinder jsonBinder;

    @NotYamlField
    public Method calculateMethod;

    @NotYamlField
    public TreeMap<String, Method> queryMethods;

    @NotYamlField
    public TreeMap<String, Enum> filterEnums;

    @NotYamlField
    public Enum defaultFilterEnum;

    @NotYamlField
    public TreeMap<String, Enum> sortOrderEnums;

    @NotYamlField
    public Enum defaultSortOrderEnum;

    @NotYamlField
    public String historyTableName;

    @NotYamlField
    public String historyEntityName;

    @NotYamlField
    public Method preCreateMethod;

    @NotYamlField
    public Method preUpdateMethod;

    @NotYamlField
    public LinkedHashMap<String, Precondition> preconditions;

    /**
     * Calculates java full class name of this Document.
     */
    public String getClassName() {
        return MODELS_PACKAGE + name;
    }
}
